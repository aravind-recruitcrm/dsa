/*
Most optimised solution using first Binary search on finding which row it belongs to and then use the same binary search to find that number in the row 
 */
 
 class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int left=0;
        int right=matrix.length-1;
        int row=matrix.length-1;
        int col=matrix[0].length-1;
        if(!(target<=matrix[row][col] && target>=matrix[0][0])) return false;

        while(left<=right) {
            int mid=left+(right-left)/2;
            if(matrix[mid][0]==target) return true;
            if(matrix[mid][0] > target) right=mid-1;
            else left=mid+1;
        }

        System.out.println(right+" "+col);
        int RowNo=right;
        left=0;
        right=col;

        while(left<=right) {
            int mid=left+(right-left)/2;
            if(matrix[RowNo][mid]==target) return true;
            if(matrix[RowNo][mid] > target) right=mid-1;
            else left=mid+1;
        }

        return false;
    }
}


/*
74. Search a 2D Matrix

 algo:
 first we check the first and last element of each row ,if it is in the range then we do BS on the row
 if then the element is not  in the range then we chech the next row
*/
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i=0;i<matrix.length;i++)
        {
            int last=matrix[i].length-1;
            
            if(matrix[i][0] == target || matrix[i][last]==target)
                return true;
            if(matrix[i][0] < target  && matrix[i][last] > target)
            {
                 return fun(matrix[i],target);
            }
                
        }
        return false;
    }
    public boolean fun(int[] arr,int target)
    {
        int left=0;
        int right=arr.length-1;
        while(left <= right)
        {
            int mid=left+(right-left)/2;
            if(arr[mid] == target )
                return true;
            if(arr[mid] < target)
                left=mid+1;
                
            else
                right=mid-1;
                
        }
        return false;
    }
}
